
1. What is Acceptance Testing?
Testing conducted to enable a user/customer to determine whether to accept a software product. Normally performed to validate the software meets a set of agreed acceptance criteria.

2. What is Accessibility Testing?
Verifying a product is accessible to the people having disabilities (deaf, blind, mentally disabled etc.).

3. What is Ad-Hoc Testing?
A testing phase where the tester tries to 'break' the system by randomly trying the system's functionality. Can include negative testing as well. See also Monkey Testing.

4. What is Agile Testing?
Testing practice for projects using agile methodologies, treating development as the customer of testing and emphasizing a test-first design paradigm. See also Test Driven Development.

5. What is Application Binary Interface (ABI)?
A specification defining requirements for portability of applications in binary forms across different system platforms and environments.

6. What is Application Programming Interface (API)?
A formalized set of software calls and routines that can be referenced by an application program in order to access supporting system or network services.

7. What is Automated Software Quality (ASQ)?
The use of software tools, such as automated testing tools, to improve software quality.

8. What is Automated Testing?
Testing employing software tools which execute tests without manual intervention. Can be applied in GUI, performance, API, etc. testing. The use of software to control the execution of tests, the comparison of actual outcomes to predicted outcomes, the setting up of test preconditions, and other test control and test reporting functions.

9. What is Backus-Naur Form?
A metalanguage used to formally describe the syntax of a language.

10. What is Basic Block?
A sequence of one or more consecutive, executable statements containing no 
branches.

11. What is Basis Path Testing?
A white box test case design technique that uses the algorithmic flow of the program to design tests.

12. What is Basis Set?
The set of tests derived using basis path testing.

13. What is Baseline?
The point at which some deliverable produced during the software engineering process is put under formal change control.

14. What you will do during the first day of job?
What would you like to do five years from now?

15. What is Beta Testing?
Testing of a rerelease of a software product conducted by customers.

16. What is Binary Portability Testing?
Testing an executable application for portability across system platforms and environments, usually for conformation to an ABI specification.

17. What is Black Box Testing?
Testing based on an analysis of the specification of a piece of software without reference to its internal workings. The goal is to test how well the component conforms to the published requirements for the component.

18. What is Bottom Up Testing?
An approach to integration testing where the lowest level components are tested first, then used to facilitate the testing of higher level components. The process is repeated until the component at the top of the hierarchy is tested.

19. What is Boundary Testing?
Test which focus on the boundary or limit conditions of the software being tested. (Some of these tests are stress tests).

20. What is Boundary Value Analysis?
BVA is similar to Equivalence Partitioning but focuses on "corner cases" or values that are usually out of range as defined by the specification. his means that if a function expects all values in range of negative 100 to positive 1000, test inputs would include negative 101 and positive 1001.

21. What is Branch Testing?
Testing in which all branches in the program source code are tested at least once.

22. What is Breadth Testing?
A test suite that exercises the full functionality of a product but does not test features in detail.

23. What is CAST?
Computer Aided Software Testing.

24. What is Capture/Replay Tool?
A test tool that records test input as it is sent to the software under test. The input cases stored can then be used to reproduce the test at a later time. Most commonly applied to GUI test tools.

25. What is CMM?
The Capability Maturity Model for Software (CMM or SW-CMM) is a model for judging the maturity of the software processes of an organization and for identifying the key practices that are required to increase the maturity of these processes. 

27. What is Cause Effect Graph?
A graphical representation of inputs and the associated outputs effects which can be used to design test cases.

28. What is Code Complete?
Phase of development where functionality is implemented in entirety; bug fixes are all that are left. All functions found in the Functional Specifications have been implemented.

29. What is Code Coverage?
An analysis method that determines which parts of the software have been executed (covered) by the test case suite and which parts have not been executed and therefore may require additional attention.

30. What is Code Inspection?
A formal testing technique where the programmer reviews source code with a
group who ask questions analyzing the program logic, analyzing the code with respect to a checklist of historically common programming errors, and analyzing its compliance with coding standards.

31. What is Code Walkthrough? 
A formal testing technique where source code is traced by a group with a small set of test cases, while the state of program variables is manually monitored, to analyze the programmer's logic and assumptions.

32. What is Coding?
The generation of source code.

33. What is Compatibility Testing?
Testing whether software is compatible with other elements of a system with which it should operate, e.g. browsers, Operating Systems, or hardware.

34. What is Component?
A minimal software item for which a separate specification is available.

35. What is Component Testing?
Testing of individual software components (Unit Testing).

36. What is Concurrency Testing?
Multi-user testing geared towards determining the effects of accessing the same application code, module or database records. Identifies and measures the level of locking, deadlocking and use of single-threaded code and locking semaphores.

37. What is Conformance Testing?
The process of testing that an implementation conforms to the specification on which it is based. Usually applied to testing conformance to a formal standard.

38. What is Context Driven Testing?
The context-driven school of software testing is flavor of Agile Testing that advocates continuous and creative evaluation of testing opportunities in light of the potential information revealed and the value of that information to the organization right now.

39. What is Conversion Testing?
Testing of programs or procedures used to convert data from existing systems for use in replacement systems.

40. What is Cyclomatic Complexity?
A measure of the logical complexity of an algorithm, used in white-box testing.

41. What is Data Dictionary?
A database that contains definitions of all data items defined during analysis.

42. What is Data Flow Diagram?
A modeling notation that represents a functional decomposition of a system.

43. What is Data Driven Testing?
Testing in which the action of a test case is parameterized by externally defined data values, maintained as a file or spreadsheet. A common technique in Automated Testing.

44. What is Debugging?
The process of finding and removing the causes of software failures.

45. What is Defect?
Non-conformance to requirements or functional / program specification

46. What is Dependency Testing?
Examines an application's requirements for pre-existing software, initial states and configuration in order to maintain proper functionality.

47. What is Depth Testing?
A test that exercises a feature of a product in full detail.

48. What is Dynamic Testing?
Testing software through executing it. See also Static Testing.

49. What is Emulator?
A device, computer program, or system that accepts the same inputs and produces the same outputs as a given system.

50. What is Endurance Testing?
Checks for memory leaks or other problems that may occur with prolonged execution

51. What is End-to-End testing?
Testing a complete application environment in a situation that mimics real-world use, such as interacting with a database, using network communications, or interacting with other hardware, applications, or systems if appropriate.

52. What is Equivalence Class?
A portion of a component's input or output domains for which the component's behaviour is assumed to be the same from the component's specification.

53. What is Equivalence Partitioning?
A test case design technique for a component in which test cases are designed to execute representatives from equivalence classes.

54. What is Exhaustive Testing?
Testing which covers all combinations of input values and preconditions for an element of the software under test.

55. What is Functional Decomposition?
A technique used during planning, analysis and design; creates a functional hierarchy for the software. 

54. What is Functional Specification?
A document that describes in detail the characteristics of the product with regard to its intended features.
 
55. What is Functional Testing? 
Testing the features and operational behavior of a product to ensure they correspond to its specifications. Testing that ignores the internal mechanism of a system or component and focuses solely on the outputs generated in response to selected inputs and execution conditions. or Black Box Testing.
 
56. What is Glass Box Testing?
A synonym for White Box Testing.
 
57. What is Gorilla Testing?
Testing one particular module, functionality heavily.
 
58. What is Gray Box Testing?
A combination of Black Box and White Box testing methodologies? testing a piece of software against its specification but using some knowledge of its internal workings.
 
59. What is High Order Tests?
Black-box tests conducted once the software has been integrated.
 
60. What is Independent Test Group (ITG)?
A group of people whose primary responsibility is software testing,
 
61. What is Inspection?
A group review quality improvement process for written material. It consists of two aspects; product (document itself) improvement and process improvement (of both document production and inspection).
 
62. What is Integration Testing?
Testing of combined parts of an application to determine if they function together correctly. Usually performed after unit and functional testing. This type of testing is especially relevant to client/server and distributed systems.
 
63. What is Installation Testing?
Confirms that the application under test recovers from expected or unexpected events without loss of data or functionality. Events can include shortage of disk space, unexpected loss of communication, or power out conditions.
 
64. What is Load Testing?
Performance Testing.
 
65. What is Localization Testing?
This term refers to making software specifically designed for a specific locality.
 
66. What is Loop Testing?
A white box testing technique that exercises program loops.
 
67. What is Metric?
A standard of measurement. Software metrics are the statistics describing the structure or content of a program. A metric should be a real objective measurement of something such as number of bugs per lines of code.
 
68. What is Monkey Testing?
Testing a system or an Application on the fly, i.e just few tests here and there to ensure the system or an application does not crash out.
 
69. What is Negative Testing?
Testing aimed at showing software does not work. Also known as "test to fail". See also Positive Testing.
 
70. What is Path Testing?
Testing in which all paths in the program source code are tested at least once.
 
71. What is Performance Testing?
Testing conducted to evaluate the compliance of a system or component with specified performance requirements. Often this is performed using an automated test tool to simulate large number of users. Also know as "Load Testing".
 
72. What is Positive Testing?
Testing aimed at showing software works. Also known as "test to pass". See also Negative Testing.
 
73. What is Quality Assurance?
All those planned or systematic actions necessary to provide adequate confidence that a product or service is of the type and quality needed and expected by the customer.

74. What is Quality Audit?
A systematic and independent examination to determine whether quality activities and related results comply with planned arrangements and whether these arrangements are implemented effectively and are suitable to achieve objectives.
 
75. What is Quality Circle?
A group of individuals with related interests that meet at regular intervals to consider problems or other matters related to the quality of outputs of a process and to the correction of problems or to the improvement of quality.
 
76. What is Quality Control?
The operational techniques and the activities used to fulfill and verify requirements of quality.
 
77. What is Quality Management?
That aspect of the overall management function that determines and implements the quality policy.
 
78. What is Quality Policy?
The overall intentions and direction of an organization as regards quality as formally expressed by top management.
 
79. What is Quality System?
The organizational structure, responsibilities, procedures, processes, and resources for implementing quality management.
 
80. What is Race Condition?
A cause of concurrency problems. Multiple accesses to a shared resource, at least one of which is a write, with no mechanism used by either to moderate simultaneous access.
 
81. What is Ramp Testing?
Continuously raising an input signal until the system breaks down.
 
82. What is Recovery Testing?
 
Confirms that the program recovers from expected or unexpected events without loss of data or functionality. Events can include shortage of disk space, unexpected loss of communication, or power out conditions

83. What is Regression Testing?
Retesting a previously tested program following modification to ensure that faults have not been introduced or uncovered as a result of the changes made.
 
84. What is Release Candidate?
A pre-release version, which contains the desired functionality of the final version, but which needs to be tested for bugs (which ideally should be removed before the final version is released).
 
85. What is Sanity Testing?
Brief test of major functional elements of a piece of software to determine if its basically operational. 

86. What is Scalability Testing?
Performance testing focused on ensuring the application under test gracefully handles increases in work load.
 
87. What is Security Testing?
Testing which confirms that the program can restrict access to authorized personnel and that the authorized personnel can access the functions available to their security level.
 
88. What is Smoke Testing?
A quick-and-dirty test that the major functions of a piece of software work. Originated in the hardware testing practice of turning on a new piece of hardware for the first time and considering it a success if it does not catch on fire.
 
89. What is Soak Testing?
Running a system at high load for a prolonged period of time. For example, running several times more transactions in an entire day (or night) than would be expected in a busy day, to identify and performance problems that appear after a large number of transactions have been executed.
 
90. What is Software Requirements Specification?
A deliverable that describes all data, functional and behavioral requirements, all constraints, and all validation requirements for software/
 
91. What is Software Testing?
A set of activities conducted with the intent of finding errors in software. 

92. What is Static Analysis?
Analysis of a program carried out without executing the program.

93. What is Static Analyzer?
A tool that carries out static analysis.

94. What is Static Testing?
Analysis of a program carried out without executing the program.

95. What is Storage Testing?
Testing that verifies the program under test stores data files in the correct directories and that it reserves sufficient space to prevent unexpected termination resulting from lack of space. This is external storage as opposed to internal storage.

96. What is Stress Testing?
Testing conducted to evaluate a system or component at or beyond the limits of its specified requirements to determine the load under which it fails and how. Often this is performance testing using a very high level of simulated load.

97. What is Structural Testing?
Testing based on an analysis of internal workings and structure of a piece of software. See also White Box Testing.

98. What is System Testing?
Testing that attempts to discover defects that are properties of the entire system rather than of its individual components.

99. What is Testability?
The degree to which a system or component facilitates the establishment of test criteria and the performance of tests to determine whether those criteria have been met.

100. What is Testing?
The process of exercising software to verify that it satisfies specified requirements and to detect errors. The process of analyzing a software item to detect the differences between existing and required conditions (that is, bugs), and to evaluate the features of the software item (Ref. IEEE Std 829). The process of operating a system or component under specified conditions, observing or recording the results, and making an evaluation of some aspect of the system or component. What is Test Automation? It is the same as Automated Testing.

101. What is Test Bed?
An execution environment configured for testing. May consist of specific hardware, OS, network topology, configuration of the product under test, other application or system software, etc. The Test Plan for a project should enumerated the test beds(s) to be used.

102. What is Test Case?
Test Case is a commonly used term for a specific test. This is usually the smallest unit of testing.
A Test Case will consist of information such as requirements testing, test steps, verification steps, prerequisites, outputs, test environment, etc.
A set of inputs, execution preconditions, and expected outcomes developed for a particular objective, such as to exercise a particular program path or to verify compliance with a specific requirement. 
Test Driven Development? Testing methodology associated with Agile Programming in which every chunk of code is covered by unit tests, which must all pass all the time, in an effort to eliminate unit-level and regression bugs during development. 
Practitioners of TDD write a lot of tests, i.e. an equal number of lines of test code to the size of the production code.

103. What is Test Driver?
A program or test tool used to execute tests. Also known as a Test Harness.

104. What is Test Environment?
The hardware and software environment in which tests will be run, and any other software with which the software under test interacts when under test including stubs and test drivers.

105. What is Test First Design?
Test-first design is one of the mandatory practices of Extreme Programming (XP).It requires that programmers do not write any production code until they have first written a unit test.

106. What is Test Harness?
A program or test tool used to execute a tests. Also known as a Test Driver.

107. What is Test Plan?
A document describing the scope, approach, resources, and schedule of intended testing activities. It identifies test items, the features to be tested, the testing tasks, who will do each task, and any risks requiring contingency planning.

108. What is Test Procedure?

A document providing detailed instructions for the execution of one or more test cases.
109. What is Test Script?

Commonly used to refer to the instructions for a particular test that will be carried out by an automated test tool.
110. What is Test Specification?
A document specifying the test approach for a software feature or combination or features and the inputs, predicted results and execution conditions for the associated tests.

111. What is Test Suite?
A collection of tests used to validate the behavior of a product. The scope of a Test Suite varies from organization to organization. There may be several Test Suites for a particular product for example. In most cases however a Test Suite is a high level concept, grouping together hundreds or thousands of tests related by what they are intended to test.

112. What is Test Tools?
Computer programs used in the testing of a system, a component of the system, or its documentation.

113. What is Thread Testing?
A variation of top-down testing where the progressive integration of components follows the implementation of subsets of the requirements, as opposed to the integration of components by successively lower levels.

114. What is Top Down Testing?
An approach to integration testing where the component at the top of the component hierarchy is tested first, with lower level components being simulated by stubs. Tested components are then used to test lower level components. The process is repeated until the lowest level components have been tested.

115. What is Total Quality Management?
A company commitment to develop a process that achieves high quality product and customer satisfaction.

116. What is Traceability Matrix?
A document showing the relationship between Test Requirements and Test Cases.

117. What is Usability Testing?
Testing the ease with which users can learn and use a product.



